#! /usr/bin/env bash
set -e

acbuild="acbuild --debug "

thinACIandMounts() {
    local outputDir=${OUTPUTDIR-ACIs}
    local name=${1-:}
    local binary=${2-:}
    local packages=${@:3}

    local envDir=$name.aci.d

    [[ ! -e $envDir ]] || rm -Rf $envDir
    [[ -d $outputDir ]] || mkdir -p $outputDir


    nix-env -f ${HOME}/synchronized/github/NixOS/nixpkgs/ -p $envDir -iA ${packages}
    binaryPath=`find -L \`readlink -f $envDir\`/ -regex ".*/.?bin/${binary}" -executable | head -n1`

    ${acbuild} begin
    trap "{ export EXT=$?;
    find .acbuild/ -type d -exec chmod +w {} +
    ${acbuild} end
    exit $EXT;
    }" EXIT

    ${acbuild} set-name $name
    ${acbuild} label add os linux
    ${acbuild} label add arch amd64

    printf '' > $outputDir/$name.mounts
    cp -R $p $envDir/* .acbuild/currentaci/rootfs/
    for p in `nix-store -qR $envDir | tr ' ' '\n'| sort -u` /etc/resolv.conf; do
        mountname=${p//[\/\.]/} 
        mountname=${mountname,,} 
        ${acbuild} mount add $mountname $p --read-only
        printf ' --volume=%s,kind=host,source=%s ' $mountname $p >> $outputDir/$name.mounts
    done
    rm -Rf $envDir*

    ${acbuild} set-exec -- $binaryPath
    ${acbuild} write --overwrite $outputDir/$name.aci
}

if [ $# -le 2 ]; then
    printf "Not enough arguments supplied. Usage:\n"
    printf "\t%s name execBinary packages...\n" $0
    exit 1
fi

thinACIandMounts $@
